// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Criar uma migration: npx prisma migrate dev
model User {
  id         String    @id @default(uuid())
  name       String
  email      String
  admin      Boolean   @default(false)
  password   String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  orders     Order[]

  @@map("users")
}

model Category {
  id         String    @id @default(uuid())
  name       String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  products   Product[]

  @@map("categories")
}

model Product {
  id          String    @id @default(uuid())
  name        String
  price       String
  description String
  banner      String
  created_at  DateTime? @default(now())
  updated_at  DateTime? @default(now())
  category    Category  @relation(fields: [category_id], references: [id])
  category_id String
  Item        Item[]

  @@map("products")
}

model Table {
  id         String    @id @default(uuid())
  name       String 
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  orders     Order[]
  @@map("tables")
}

model Order {
  id         String    @id @default(uuid())
  table      Table     @relation(fields: [table_id], references: [id])
  table_id   String
  // status     Boolean   @default(false)
  status     Status    @default(A)
  phone      String? 
  draft      Boolean   @default(true)
  name       String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  user_id    String
  created_by User      @relation(fields: [user_id], references: [id])
  items      Item[]

  @@map("orders")
}

enum Status {
  A
  P
  C
  F
}

model Item {
  id         String    @id @default(uuid())
  amount      Int
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  order      Order     @relation(fields: [order_id], references: [id])
  order_id   String
  product    Product   @relation(fields: [product_id], references: [id])
  product_id String

  @@map("items")
}
